// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/louiskwezi/Desktop/device_logger/models/models.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/louismomo66/logger/models"
)

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// CreateDevicek mocks base method.
func (m *MockDeviceRepository) CreateDevicek(device *models.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevicek", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDevicek indicates an expected call of CreateDevicek.
func (mr *MockDeviceRepositoryMockRecorder) CreateDevicek(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevicek", reflect.TypeOf((*MockDeviceRepository)(nil).CreateDevicek), device)
}

// CreateReadings mocks base method.
func (m *MockDeviceRepository) CreateReadings(readings *models.Readings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReadings", readings)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReadings indicates an expected call of CreateReadings.
func (mr *MockDeviceRepositoryMockRecorder) CreateReadings(readings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReadings", reflect.TypeOf((*MockDeviceRepository)(nil).CreateReadings), readings)
}

// DeleteDeviceByIMEI mocks base method.
func (m *MockDeviceRepository) DeleteDeviceByIMEI(imei string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeviceByIMEI", imei)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeviceByIMEI indicates an expected call of DeleteDeviceByIMEI.
func (mr *MockDeviceRepositoryMockRecorder) DeleteDeviceByIMEI(imei interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceByIMEI", reflect.TypeOf((*MockDeviceRepository)(nil).DeleteDeviceByIMEI), imei)
}

// GetDeviceByIMEI mocks base method.
func (m *MockDeviceRepository) GetDeviceByIMEI(imei string) (*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByIMEI", imei)
	ret0, _ := ret[0].(*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByIMEI indicates an expected call of GetDeviceByIMEI.
func (mr *MockDeviceRepositoryMockRecorder) GetDeviceByIMEI(imei interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByIMEI", reflect.TypeOf((*MockDeviceRepository)(nil).GetDeviceByIMEI), imei)
}

// GetReadingsByIMEI mocks base method.
func (m *MockDeviceRepository) GetReadingsByIMEI(imei string) ([]models.Readings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadingsByIMEI", imei)
	ret0, _ := ret[0].([]models.Readings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadingsByIMEI indicates an expected call of GetReadingsByIMEI.
func (mr *MockDeviceRepositoryMockRecorder) GetReadingsByIMEI(imei interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadingsByIMEI", reflect.TypeOf((*MockDeviceRepository)(nil).GetReadingsByIMEI), imei)
}
